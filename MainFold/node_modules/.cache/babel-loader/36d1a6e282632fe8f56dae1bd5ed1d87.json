{"ast":null,"code":"var _jsxFileName = \"D:\\\\Messaging app\\\\Messaging-app\\\\MainFold\\\\src\\\\comp\\\\MessangerCom\\\\Context\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport useLocalStorage from \"../UseLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  Email,\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversation(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation({\n    recipients,\n    text,\n    sender\n  }) {\n    setConversation(prevConversations => {\n      let madeChange = fa;\n    });\n  }\n\n  function senMessage({\n    recipients,\n    text,\n    sender: Email\n  }) {}\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.Email === recipient;\n      });\n      const name = contact && contact.Name || recipient;\n      return {\n        Email: recipient,\n        name\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"stmozFARmrd3qRgPMDTdzyBL43c=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["D:/Messaging app/Messaging-app/MainFold/src/comp/MessangerCom/Context/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","Email","children","conversations","setConversation","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","fa","senMessage","formattedConversations","map","conversation","index","recipient","contact","find","name","Name","selected","value","selectedConversation","sendMessage","selectConversationIndex"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGL,KAAK,CAACM,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAON,UAAU,CAACI,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAA/B,EAAoD;AAAA;;AACzD,QAAM,CAACC,aAAD,EAAgBC,eAAhB,IAAmCT,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAxD;AACA,QAAM,CAACU,yBAAD,EAA4BC,4BAA5B,IAA4DZ,QAAQ,CAAC,CAAD,CAA1E;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAeX,WAAW,EAAhC;;AACA,WAASY,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCL,IAAAA,eAAe,CAAEM,iBAAD,IAAuB;AACrC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAvB,CAAP;AACD,KAFc,CAAf;AAGD;;AACD,WAASC,wBAAT,CAAkC;AAAEH,IAAAA,UAAF;AAAcI,IAAAA,IAAd;AAAoBC,IAAAA;AAApB,GAAlC,EAAgE;AAC9DV,IAAAA,eAAe,CAACM,iBAAiB,IAAE;AAAC,UAAIK,UAAU,GAAGC,EAAjB;AAAoB,KAAzC,CAAf;AACD;;AACD,WAASC,UAAT,CAAoB;AAAER,IAAAA,UAAF;AAAcI,IAAAA,IAAd;AAAoBC,IAAAA,MAAM,EAAEb;AAA5B,GAApB,EAAyD,CAAE;;AAC3D,QAAMiB,sBAAsB,GAAGf,aAAa,CAACgB,GAAd,CAAkB,CAACC,YAAD,EAAeC,KAAf,KAAyB;AACxE,UAAMZ,UAAU,GAAGW,YAAY,CAACX,UAAb,CAAwBU,GAAxB,CAA6BG,SAAD,IAAe;AAC5D,YAAMC,OAAO,GAAGhB,QAAQ,CAACiB,IAAT,CAAeD,OAAD,IAAa;AACzC,eAAOA,OAAO,CAACtB,KAAR,KAAkBqB,SAAzB;AACD,OAFe,CAAhB;AAGA,YAAMG,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;AACA,aAAO;AAAErB,QAAAA,KAAK,EAAEqB,SAAT;AAAoBG,QAAAA;AAApB,OAAP;AACD,KANkB,CAAnB;AAOA,UAAME,QAAQ,GAAGN,KAAK,KAAKhB,yBAA3B;AACA,WAAO,EAAE,GAAGe,YAAL;AAAmBX,MAAAA,UAAnB;AAA+BkB,MAAAA;AAA/B,KAAP;AACD,GAV8B,CAA/B;AAWA,QAAMC,KAAK,GAAG;AACZzB,IAAAA,aAAa,EAAEe,sBADH;AAEZW,IAAAA,oBAAoB,EAAEX,sBAAsB,CAACb,yBAAD,CAFhC;AAGZyB,IAAAA,WAHY;AAIZC,IAAAA,uBAAuB,EAAEzB,4BAJb;AAKZE,IAAAA;AALY,GAAd;AAOA,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEoB,KAAtC;AAAA,cACG1B;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IApCeF,qB;UAC2BL,e,EAEpBC,W;;;KAHPI,qB","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport useLocalStorage from \"../UseLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ Email, children }) {\r\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n  const { contacts } = useContacts();\r\n  function createConversation(recipients) {\r\n    setConversation((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }];\r\n    });\r\n  }\r\n  function addMessageToConversation({ recipients, text, sender }) {\r\n    setConversation(prevConversations=>{let madeChange = fa})\r\n  }\r\n  function senMessage({ recipients, text, sender: Email }) {}\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.Email === recipient;\r\n      });\r\n      const name = (contact && contact.Name) || recipient;\r\n      return { Email: recipient, name };\r\n    });\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation, recipients, selected };\r\n  });\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation,\r\n  };\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}