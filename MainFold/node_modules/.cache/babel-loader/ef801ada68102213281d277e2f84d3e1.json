{"ast":null,"code":"var _jsxFileName = \"D:\\\\Messaging app\\\\Messaging-app\\\\MainFOld\\\\src\\\\comp\\\\MessangerCom\\\\Context\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport useLocalStorage from \"../UseLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversation(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const formattedConversations = conversations.map(conversation => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.Email === recipient;\n      });\n      const name = contact && contact.Name || recipient;\n      return {\n        Email: recipient,\n        name\n      };\n    });\n    return { ...conversation,\n      recipients\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"qFwc/9n7KvhNA08atE05xhYwhtk=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["D:/Messaging app/Messaging-app/MainFOld/src/comp/MessangerCom/Context/ConversationsProvider.js"],"names":["React","useContext","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","children","conversations","setConversation","selectedConversationIndex","setSelectedConversationIndex","useState","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","conversation","recipient","contact","find","Email","name","Name","value"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGJ,KAAK,CAACK,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOL,UAAU,CAACG,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA6C;AAAA;;AAClD,QAAM,CAACC,aAAD,EAAgBC,eAAhB,IAAmCR,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAxD;AACA,QAAM,CAACS,yBAAD,EAA4BC,4BAA5B,IAA2DC,QAAQ,CAAC,CAAD,CAAzE;AACF,QAAM;AAAEC,IAAAA;AAAF,MAAcX,WAAW,EAA/B;;AACE,WAASY,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCN,IAAAA,eAAe,CAAEO,iBAAD,IAAuB;AACrC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAvB,CAAP;AACD,KAFc,CAAf;AAGD;;AACH,QAAOC,sBAAsB,GAAGV,aAAa,CAACW,GAAd,CAAkBC,YAAY,IAAG;AAC/D,UAAML,UAAU,GAAGK,YAAY,CAACL,UAAb,CAAwBI,GAAxB,CAA4BE,SAAS,IAAE;AACxD,YAAMC,OAAO,GAAIT,QAAQ,CAACU,IAAT,CAAcD,OAAO,IAAI;AAAE,eAAOA,OAAO,CAACE,KAAR,KAAkBH,SAAzB;AAC3C,OADgB,CAAjB;AAEA,YAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACI,IAApB,IAA6BL,SAA1C;AACA,aAAM;AAAEG,QAAAA,KAAK,EAAGH,SAAV;AAAqBI,QAAAA;AAArB,OAAN;AACD,KALkB,CAAnB;AAMA,WAAO,EAAC,GAAGL,YAAJ;AAAiBL,MAAAA;AAAjB,KAAP;AACD,GAR+B,CAAhC;AASA,QAAMY,KAAK,GAAG;AACZnB,IAAAA,aAAa,EAAGU,sBADJ;AAC2BJ,IAAAA;AAD3B,GAAd;AAGE,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAGa,KAAvC;AAAA,cACGpB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IA1BeD,qB;UAC2BL,e,EAEvBC,W;;;KAHJI,qB","sourcesContent":["import React, { useContext } from \"react\";\r\nimport useLocalStorage from \"../UseLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ children }) {\r\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\r\n  const [selectedConversationIndex, setSelectedConversationIndex]= useState(0)\r\nconst { contacts} = useContacts()\r\n  function createConversation(recipients) {\r\n    setConversation((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }];\r\n    });\r\n  }\r\nconst  formattedConversations = conversations.map(conversation =>{\r\n  const recipients = conversation.recipients.map(recipient=>{\r\n    const contact =  contacts.find(contact => { return contact.Email === recipient\r\n    })\r\n    const name = (contact && contact.Name) || recipient\r\n    return{ Email : recipient ,name}\r\n  })\r\n  return {...conversation,recipients}\r\n})\r\nconst value = {\r\n  conversations : formattedConversations,createConversation\r\n}\r\n  return (\r\n    <ConversationsContext.Provider value={ value }>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}