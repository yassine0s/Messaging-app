{"ast":null,"code":"var _jsxFileName = \"D:\\\\Messaging app\\\\Messaging-app\\\\MainFold\\\\src\\\\comp\\\\MessangerCom\\\\Context\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport useLocalStorage from \"../UseLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children\n}) {\n  _s2();\n\n  const location = useLocation();\n  useEffect(() => {}, [location]);\n  const Email = location.state.detail;\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversation(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation({\n    recipients,\n    text,\n    sender\n  }) {\n    setConversation(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: Email\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.Email === recipient;\n      });\n      const name = contact && contact.Name || recipient;\n      return {\n        Email: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.Email === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = location.state.detail === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"783bHF+um+lRlRwdfCO48DXq5QM=\", false, function () {\n  return [useLocation, useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["D:/Messaging app/Messaging-app/MainFold/src/comp/MessangerCom/Context/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","useEffect","useLocation","ConversationsContext","createContext","useConversations","ConversationsProvider","children","location","Email","state","detail","conversations","setConversation","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","sendMessage","formattedConversations","index","recipient","contact","find","name","Name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport useLocalStorage from \"../UseLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\nimport { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n  \r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ children }) {\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {}, [location]);\r\n  const Email = location.state.detail\r\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n  const { contacts } = useContacts();\r\n  function createConversation(recipients) {\r\n    setConversation((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }];\r\n    });\r\n  }\r\n  function addMessageToConversation({ recipients, text, sender }) {\r\n    setConversation(prevConversations=>{let madeChange = false \r\n      const newMessage= {sender,text} \r\n      const newConversations = prevConversations.map\r\n      (conversation=>{\r\n        if(arrayEquality(conversation.recipients,recipients))\r\n        {\r\n        madeChange = true\r\n        return {...conversation,messages:[conversation.messages,newMessage]\r\n      }}\r\n      return conversation})\r\n    if(madeChange){return newConversations}else {return[...prevConversations,{recipients,messages :[newMessage]}\r\n  ]}})\r\n  }\r\n  function sendMessage( recipients, text) {\r\n    addMessageToConversation({recipients,text, sender : Email } )\r\n  }\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.Email === recipient;\r\n      });\r\n      const name = (contact && contact.Name) || recipient;\r\n      return { Email: recipient, name };\r\n    });\r\n    const messages = conversation.messages.map(message=>{\r\n      const contact = contacts.find(contact=>{return contact.Email===message.sender})\r\n      const name =(contact && contact.name) || message.sender\r\n      const fromMe = location.state.detail === message.sender\r\n      return{...message,senderName: name, fromMe}\r\n    })\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation,messages, recipients, selected };\r\n  });\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation,\r\n  };\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\nfunction arrayEquality(a,b){\r\n  if(a.length !==b.length) return false\r\n  a.sort()\r\n  b.sort()\r\n  return a.every((element,index)=>{return element=== b[index]})\r\n}\r\n"]},"metadata":{},"sourceType":"module"}