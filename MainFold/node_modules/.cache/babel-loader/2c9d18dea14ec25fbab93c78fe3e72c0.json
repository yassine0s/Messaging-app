{"ast":null,"code":"var _jsxFileName = \"D:\\\\Messaging app\\\\Messaging-app\\\\MainFold\\\\src\\\\comp\\\\MessangerCom\\\\NewconversationModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { Modal, Form } from \"react-bootstrap\";\nimport { Button, Input } from \"reactstrap\";\nimport \"./SideBar.css\";\nimport { useContacts } from \"./Context/ContactsProvider\";\nimport { useConversations } from \"./Context/ConversationsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NewConversationModal = ({\n  closeModal\n}) => {\n  _s();\n\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n  const {\n    contacts\n  } = useContacts();\n  const {\n    createConversation\n  } = useConversations();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    createConversation(selectedContactIds);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    setSelectedContactIds(prevSelectedContactIds => {\n      if (prevSelectedContactIds.includes(contactId)) {\n        return prevSelectedContactIds.filter(prevId => {\n          return contactId !== prevId;\n        });\n      } else {\n        return [...prevSelectedContactIds, contactId];\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      className: \"cardStyle\",\n      closeButton: true,\n      children: \"Create Conversation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      className: \"box\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [Contacts.map(contact => /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlEmail: contact.Email,\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \" checkbox\",\n            value: selectedContactEmails.includes(contact.Email),\n            label: contact.Name,\n            onChange: () => handleCheckboxChange(contact.Email)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)\n        }, contact.Email, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          outline: true,\n          color: \"secondary\",\n          className: \"mt-2\",\n          onClick: handleSubmit,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(NewConversationModal, \"vQmONcecoWX1cwhaThpVMl7yKI4=\", false, function () {\n  return [useContacts, useConversations];\n});\n\n_c = NewConversationModal;\nexport default NewConversationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewConversationModal\");","map":{"version":3,"sources":["D:/Messaging app/Messaging-app/MainFold/src/comp/MessangerCom/NewconversationModal.js"],"names":["React","useContext","useState","Modal","Form","Button","Input","useContacts","useConversations","NewConversationModal","closeModal","selectedContactIds","setSelectedContactIds","contacts","createConversation","handleSubmit","e","preventDefault","handleCheckboxChange","contactId","prevSelectedContactIds","includes","filter","prevId","Contacts","map","contact","Email","selectedContactEmails","Name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA0C,OAA1C;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,iBAA5B;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,YAA9B;AACA,OAAO,eAAP;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAAQC,gBAAR,QAA+B,iCAA/B;;;;AACA,MAAMC,oBAAoB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAkB;AAAA;;AAC7C,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAeN,WAAW,EAAhC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAyBN,gBAAgB,EAA/C;;AAEA,WAASO,YAAT,CAAsBC,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,CAACC,cAAF;AAEAH,IAAAA,kBAAkB,CAACH,kBAAD,CAAlB;AACAD,IAAAA,UAAU;AACX;;AAED,WAASQ,oBAAT,CAA8BC,SAA9B,EAAyC;AACvCP,IAAAA,qBAAqB,CAACQ,sBAAsB,IAAI;AAC9C,UAAIA,sBAAsB,CAACC,QAAvB,CAAgCF,SAAhC,CAAJ,EAAgD;AAC9C,eAAOC,sBAAsB,CAACE,MAAvB,CAA8BC,MAAM,IAAI;AAC7C,iBAAOJ,SAAS,KAAKI,MAArB;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACL,eAAO,CAAC,GAAGH,sBAAJ,EAA4BD,SAA5B,CAAP;AACD;AACF,KARoB,CAArB;AASD;;AACD,sBACE;AAAA,4BACE,QAAC,KAAD,CAAO,MAAP;AAAc,MAAA,SAAS,EAAC,WAAxB;AAAoC,MAAA,WAAW,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,KAAD,CAAO,IAAP;AAAY,MAAA,SAAS,EAAC,KAAtB;AAAA,6BACE,QAAC,IAAD;AAAA,mBACGK,QAAQ,CAACC,GAAT,CAAcC,OAAD,iBACZ,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,YAAY,EAAEA,OAAO,CAACC,KAAlC;AAAA,iCACE,QAAC,IAAD,CAAM,KAAN;AACA,YAAA,IAAI,EAAE,WADN;AAEA,YAAA,KAAK,EAAGC,qBAAqB,CAACP,QAAtB,CAA+BK,OAAO,CAACC,KAAvC,CAFR;AAGA,YAAA,KAAK,EAAID,OAAO,CAACG,IAHjB;AAIA,YAAA,QAAQ,EAAG,MAAIX,oBAAoB,CAACQ,OAAO,CAACC,KAAT;AAJnC;AAAA;AAAA;AAAA;AAAA;AADF,WAA8CD,OAAO,CAACC,KAAtD;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,eAaE,QAAC,MAAD;AACE,UAAA,OAAO,MADT;AAEE,UAAA,KAAK,EAAC,WAFR;AAGE,UAAA,SAAS,EAAC,MAHZ;AAIE,UAAA,OAAO,EAAEZ,YAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AA+BD,CAtDD;;GAAMN,oB;UAEiBF,W,EACUC,gB;;;KAH3BC,oB;AAwDN,eAAeA,oBAAf","sourcesContent":["import React , {useContext, useState}from \"react\";\r\nimport { Modal, Form } from \"react-bootstrap\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport \"./SideBar.css\";\r\nimport { useContacts } from \"./Context/ContactsProvider\";\r\nimport {useConversations} from \"./Context/ConversationsProvider\"\r\nconst NewConversationModal = ({closeModal}) => {\r\n  const [selectedContactIds, setSelectedContactIds] = useState([])\r\n  const { contacts } = useContacts()\r\n  const { createConversation } = useConversations()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    createConversation(selectedContactIds)\r\n    closeModal()\r\n  }\r\n\r\n  function handleCheckboxChange(contactId) {\r\n    setSelectedContactIds(prevSelectedContactIds => {\r\n      if (prevSelectedContactIds.includes(contactId)) {\r\n        return prevSelectedContactIds.filter(prevId => {\r\n          return contactId !== prevId\r\n        })\r\n      } else {\r\n        return [...prevSelectedContactIds, contactId]\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    <>\r\n      <Modal.Header className=\"cardStyle\" closeButton>\r\n        Create Conversation\r\n      </Modal.Header>\r\n      <Modal.Body className=\"box\">\r\n        <Form>\r\n          {Contacts.map((contact) => (\r\n            <Form.Group controlEmail={contact.Email} key={contact.Email}>\r\n              <Form.Check\r\n              type =\" checkbox\"\r\n              value ={selectedContactEmails.includes(contact.Email)}\r\n              label = {contact.Name}\r\n              onChange ={()=>handleCheckboxChange(contact.Email)}\r\n              />\r\n\r\n\r\n            </Form.Group>\r\n          ))}\r\n          <Button\r\n            outline\r\n            color=\"secondary\"\r\n            className=\"mt-2\"\r\n            onClick={handleSubmit}\r\n          >\r\n            Create\r\n          </Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewConversationModal;\r\n"]},"metadata":{},"sourceType":"module"}