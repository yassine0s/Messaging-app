{"ast":null,"code":"var _jsxFileName = \"D:\\\\Messaging app\\\\Messaging-app\\\\MainFold\\\\src\\\\comp\\\\MessangerCom\\\\Context\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useCallback } from \"react\";\nimport useLocalStorage from \"../UseLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useSocket } from \"./socketProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children\n}) {\n  _s2();\n\n  const location = useLocation();\n  useEffect(() => {}, [location]);\n  const Email = location.state.detail;\n  console.log(Email);\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversation(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setConversation(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [set]);\n  useEffect(() => {\n    if (socket === null) return;\n    socket.on('recive-message', addMessageToConversation);\n    return () => socket.off('recipient-message'), [socket, addMessageToConversation];\n  });\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: Email\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.Email === recipient;\n      });\n      const name = contact && contact.Name || recipient;\n      return {\n        Email: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.Email === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = Email === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"2NLSOc/4xzjNJuevyVA9miwZzUU=\", false, function () {\n  return [useLocation, useLocalStorage, useContacts, useSocket];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["D:/Messaging app/Messaging-app/MainFold/src/comp/MessangerCom/Context/ConversationsProvider.js"],"names":["React","useContext","useState","useCallback","useLocalStorage","useContacts","useEffect","useLocation","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","children","location","Email","state","detail","console","log","conversations","setConversation","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","set","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","Name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAEA,MAAMC,oBAAoB,gBAAGT,KAAK,CAACU,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOV,UAAU,CAACQ,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA6C;AAAA;;AAClD,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACQ,QAAD,CAAX,CAAT;AACA,QAAMC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAeC,MAA7B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,QAAM,CAACK,aAAD,EAAgBC,eAAhB,IAAmCjB,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAxD;AACA,QAAM,CAACkB,yBAAD,EAA4BC,4BAA5B,IAA4DrB,QAAQ,CAAC,CAAD,CAA1E;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAAenB,WAAW,EAAhC;AACA,QAAMoB,MAAM,GAAGjB,SAAS,EAAxB;;AACA,WAASkB,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCN,IAAAA,eAAe,CAAEO,iBAAD,IAAuB;AACrC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAvB,CAAP;AACD,KAFc,CAAf;AAGD;;AACD,QAAMC,wBAAwB,GAAC3B,WAAW,CAAC,CAAC;AAAEwB,IAAAA,UAAF;AAAcI,IAAAA,IAAd;AAAoBC,IAAAA;AAApB,GAAD,KAAiC;AAC1EX,IAAAA,eAAe,CAACO,iBAAiB,IAAI;AACnC,UAAIK,UAAU,GAAG,KAAjB;AACA,YAAMC,UAAU,GAAG;AAAEF,QAAAA,MAAF;AAAUD,QAAAA;AAAV,OAAnB;AACA,YAAMI,gBAAgB,GAAGP,iBAAiB,CAACQ,GAAlB,CAAsBC,YAAY,IAAI;AAC7D,YAAIC,aAAa,CAACD,YAAY,CAACV,UAAd,EAA0BA,UAA1B,CAAjB,EAAwD;AACtDM,UAAAA,UAAU,GAAG,IAAb;AACA,iBAAO,EACL,GAAGI,YADE;AAELR,YAAAA,QAAQ,EAAE,CAAC,GAAGQ,YAAY,CAACR,QAAjB,EAA2BK,UAA3B;AAFL,WAAP;AAID;;AACD,eAAOG,YAAP;AACD,OATwB,CAAzB;;AAUA,UAAIJ,UAAJ,EAAgB;AACd,eAAOE,gBAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAC,GAAGP,iBAAJ,EAAuB;AAAED,UAAAA,UAAF;AAAcE,UAAAA,QAAQ,EAAE,CAACK,UAAD;AAAxB,SAAvB,CAAP;AACD;AACF,KAlBc,CAAf;AAmBD,GApByC,EAoBxC,CAACK,GAAD,CApBwC,CAA1C;AAqBAjC,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAGmB,MAAM,KAAI,IAAb,EAAmB;AACnBA,IAAAA,MAAM,CAACe,EAAP,CAAU,gBAAV,EAA2BV,wBAA3B;AACA,WAAO,MAAKL,MAAM,CAACgB,GAAP,CAAW,mBAAX,CAAL,EAAqC,CAAChB,MAAD,EAAQK,wBAAR,CAA5C;AACD,GAJQ,CAAT;;AAKA,WAASY,WAAT,CAAqBf,UAArB,EAAiCI,IAAjC,EAAuC;AACrCN,IAAAA,MAAM,CAACkB,IAAP,CAAY,cAAZ,EAA4B;AAAChB,MAAAA,UAAD;AAAYI,MAAAA;AAAZ,KAA5B;AACAD,IAAAA,wBAAwB,CAAC;AAAEH,MAAAA,UAAF;AAAcI,MAAAA,IAAd;AAAoBC,MAAAA,MAAM,EAAEjB;AAA5B,KAAD,CAAxB;AACD;;AACD,QAAM6B,sBAAsB,GAAGxB,aAAa,CAACgB,GAAd,CAAkB,CAACC,YAAD,EAAeQ,KAAf,KAAyB;AACxE,UAAMlB,UAAU,GAAGU,YAAY,CAACV,UAAb,CAAwBS,GAAxB,CAA4BU,SAAS,IAAI;AAC1D,YAAMC,OAAO,GAAGvB,QAAQ,CAACwB,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAAChC,KAAR,KAAkB+B,SAAzB;AACD,OAFe,CAAhB;AAGA,YAAMG,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;AACA,aAAO;AAAE/B,QAAAA,KAAK,EAAE+B,SAAT;AAAoBG,QAAAA;AAApB,OAAP;AACD,KANkB,CAAnB;AAOA,UAAMpB,QAAQ,GAAGQ,YAAY,CAACR,QAAb,CAAsBO,GAAtB,CAA0Be,OAAO,IAAI;AACpD,YAAMJ,OAAO,GAAGvB,QAAQ,CAACwB,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAAChC,KAAR,KAAkBoC,OAAO,CAACnB,MAAjC;AACD,OAFe,CAAhB;AAGA,YAAMiB,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BE,OAAO,CAACnB,MAAlD;AACA,YAAMoB,MAAM,GAAGrC,KAAK,KAAKoC,OAAO,CAACnB,MAAjC;AACA,aAAO,EAAE,GAAGmB,OAAL;AAAcE,QAAAA,UAAU,EAAEJ,IAA1B;AAAgCG,QAAAA;AAAhC,OAAP;AACD,KAPgB,CAAjB;AAQA,UAAME,QAAQ,GAAGT,KAAK,KAAKvB,yBAA3B;AACA,WAAO,EAAE,GAAGe,YAAL;AAAmBR,MAAAA,QAAnB;AAA6BF,MAAAA,UAA7B;AAAyC2B,MAAAA;AAAzC,KAAP;AACD,GAlB8B,CAA/B;AAmBA,QAAMC,KAAK,GAAG;AACZnC,IAAAA,aAAa,EAAEwB,sBADH;AAEZY,IAAAA,oBAAoB,EAAEZ,sBAAsB,CAACtB,yBAAD,CAFhC;AAGZoB,IAAAA,WAHY;AAIZe,IAAAA,uBAAuB,EAAElC,4BAJb;AAKZG,IAAAA;AALY,GAAd;AAOA,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAE6B,KAAtC;AAAA,cACG1C;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IA5EeD,qB;UACGL,W,EAKwBH,e,EAEpBC,W,EACNG,S;;;KATDI,qB;;AA6EhB,SAAS0B,aAAT,CAAuBoB,CAAvB,EAA0BC,CAA1B,EAA6B;AAC3B,MAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B,OAAO,KAAP;AAE3BF,EAAAA,CAAC,CAACG,IAAF;AACAF,EAAAA,CAAC,CAACE,IAAF;AAEA,SAAOH,CAAC,CAACI,KAAF,CAAQ,CAACC,OAAD,EAAUlB,KAAV,KAAoB;AACjC,WAAOkB,OAAO,KAAKJ,CAAC,CAACd,KAAD,CAApB;AACD,GAFM,CAAP;AAGD","sourcesContent":["import React, { useContext, useState,useCallback } from \"react\";\r\nimport useLocalStorage from \"../UseLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\nimport { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useSocket } from \"./socketProvider\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ children }) {\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {}, [location]);\r\n  const Email = location.state.detail;\r\n  console.log(Email)\r\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n  const { contacts } = useContacts();\r\n  const socket = useSocket()\r\n  function createConversation(recipients) {\r\n    setConversation((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }];\r\n    });\r\n  }\r\n  const addMessageToConversation=useCallback(({ recipients, text, sender }) =>{\r\n    setConversation(prevConversations => {\r\n      let madeChange = false;\r\n      const newMessage = { sender, text };\r\n      const newConversations = prevConversations.map(conversation => {\r\n        if (arrayEquality(conversation.recipients, recipients)) {\r\n          madeChange = true;\r\n          return {\r\n            ...conversation,\r\n            messages: [...conversation.messages, newMessage]\r\n          };\r\n        }\r\n        return conversation;\r\n      });\r\n      if (madeChange) {\r\n        return newConversations;\r\n      } else {\r\n        return [...prevConversations, { recipients, messages: [newMessage] }];\r\n      }\r\n    });\r\n  },[set])\r\n  useEffect(()=>{\r\n    if(socket ===null) return\r\n    socket.on('recive-message',addMessageToConversation)\r\n    return ()=> socket.off('recipient-message'),[socket,addMessageToConversation]\r\n  })\r\n  function sendMessage(recipients, text) {\r\n    socket.emit('send-message', {recipients,text })\r\n    addMessageToConversation({ recipients, text, sender: Email });\r\n  }\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map(recipient => {\r\n      const contact = contacts.find(contact => {\r\n        return contact.Email === recipient;\r\n      });\r\n      const name = (contact && contact.Name) || recipient;\r\n      return { Email: recipient, name };\r\n    });\r\n    const messages = conversation.messages.map(message => {\r\n      const contact = contacts.find(contact => {\r\n        return contact.Email === message.sender;\r\n      });\r\n      const name = (contact && contact.name) || message.sender;\r\n      const fromMe = Email === message.sender;\r\n      return { ...message, senderName: name, fromMe };\r\n    });\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation, messages, recipients, selected };\r\n  });\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation,\r\n  };\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n\r\n  a.sort();\r\n  b.sort();\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index];\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}