{"ast":null,"code":"var _jsxFileName = \"D:\\\\Messaging app\\\\Messaging-app\\\\MainFold\\\\src\\\\comp\\\\MessangerCom\\\\Context\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport useLocalStorage from \"../UseLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction email() {}\n\nconst location = useLocation();\nuseEffect(() => {}, [location]);\nconst Email = location.state.detail;\nexport function ConversationsProvider({\n  Email,\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversation(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation({\n    recipients,\n    text,\n    sender\n  }) {\n    setConversation(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: Email\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.Email === recipient;\n      });\n      const name = contact && contact.Name || recipient;\n      return {\n        Email: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.Email === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = Email === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"stmozFARmrd3qRgPMDTdzyBL43c=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["D:/Messaging app/Messaging-app/MainFold/src/comp/MessangerCom/Context/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","useEffect","useLocation","ConversationsContext","createContext","useConversations","email","location","Email","state","detail","ConversationsProvider","children","conversations","setConversation","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","sendMessage","formattedConversations","index","recipient","contact","find","name","Name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport useLocalStorage from \"../UseLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\nimport { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\nfunction email(){}\r\nconst location = useLocation();\r\nuseEffect(() => {}, [location]);\r\nconst Email = location.state.detail;\r\nexport function ConversationsProvider({ Email,children }) {\r\n\r\n\r\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n  const { contacts } = useContacts();\r\n  function createConversation(recipients) {\r\n    setConversation((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }];\r\n    });\r\n  }\r\n  function addMessageToConversation({ recipients, text, sender }) {\r\n    setConversation((prevConversations) => {\r\n      let madeChange = false;\r\n      const newMessage = { sender, text };\r\n      const newConversations = prevConversations.map((conversation) => {\r\n        if (arrayEquality(conversation.recipients, recipients)) {\r\n          madeChange = true;\r\n          return {\r\n            ...conversation,\r\n            messages: [conversation.messages, newMessage]\r\n          };\r\n        }\r\n        return conversation;\r\n      });\r\n      if (madeChange) {\r\n        return newConversations;\r\n      } else {\r\n        return [...prevConversations, { recipients, messages: [newMessage] }];\r\n      }\r\n    });\r\n  }\r\n  function sendMessage(recipients, text) {\r\n    addMessageToConversation({ recipients, text, sender: Email });\r\n  }\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map(recipient => {\r\n      const contact = contacts.find(contact => {\r\n        return contact.Email === recipient;\r\n      });\r\n      const name = (contact && contact.Name) || recipient;\r\n      return { Email: recipient, name };\r\n    });\r\n    const messages = conversation.messages.map(message => {\r\n      const contact = contacts.find(contact => {\r\n        return contact.Email === message.sender;\r\n      });\r\n      const name = (contact && contact.name) || message.sender;\r\n      const fromMe = Email === message.sender;\r\n      return { ...message, senderName: name, fromMe };\r\n    });\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation, messages, recipients, selected };\r\n  });\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation,\r\n  };\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n\r\n  a.sort();\r\n  b.sort();\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index];\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}