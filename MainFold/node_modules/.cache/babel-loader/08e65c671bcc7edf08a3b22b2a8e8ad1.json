{"ast":null,"code":"var _jsxFileName = \"D:\\\\Messaging app\\\\Messaging-app\\\\Mainfold\\\\src\\\\comp\\\\MessangerCom\\\\Context\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport useLocalStorage from \"../UseLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversation(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const formattedConversations = conversations.map(conversation => {\n    const recipients = conversation.recipients.map(recipient => {\n      return contact.find(contact => {\n        contact.Email === recipient;\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      conversations,\n      createConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"XTg3T1eIM0cfCj9BMYT+AVH7QHI=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["D:/Messaging app/Messaging-app/Mainfold/src/comp/MessangerCom/Context/ConversationsProvider.js"],"names":["React","useContext","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","children","conversations","setConversation","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","conversation","recipient","contact","find","Email"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGJ,KAAK,CAACK,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAOL,UAAU,CAACG,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA6C;AAAA;;AAClD,QAAM,CAACC,aAAD,EAAgBC,eAAhB,IAAmCR,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAxD;AACF,QAAM;AAAES,IAAAA;AAAF,MAAcR,WAAW,EAA/B;;AACE,WAASS,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCH,IAAAA,eAAe,CAAEI,iBAAD,IAAuB;AACrC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAvB,CAAP;AACD,KAFc,CAAf;AAGD;;AACH,QAAOC,sBAAsB,GAAGP,aAAa,CAACQ,GAAd,CAAkBC,YAAY,IAAG;AAC/D,UAAML,UAAU,GAAGK,YAAY,CAACL,UAAb,CAAwBI,GAAxB,CAA4BE,SAAS,IAAE;AACxD,aAAOC,OAAO,CAACC,IAAR,CAAaD,OAAO,IAAI;AAAEA,QAAAA,OAAO,CAACE,KAAR,KAAkBH,SAAlB;AAChC,OADM,CAAP;AAED,KAHkB,CAAnB;AAID,GAL+B,CAAhC;AAME,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAE;AAAEV,MAAAA,aAAF;AAAiBG,MAAAA;AAAjB,KAAtC;AAAA,cACGJ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAnBeD,qB;UAC2BL,e,EACvBC,W;;;KAFJI,qB","sourcesContent":["import React, { useContext } from \"react\";\r\nimport useLocalStorage from \"../UseLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ children }) {\r\n  const [conversations, setConversation] = useLocalStorage(\"conversations\", []);\r\nconst { contacts} = useContacts()\r\n  function createConversation(recipients) {\r\n    setConversation((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }];\r\n    });\r\n  }\r\nconst  formattedConversations = conversations.map(conversation =>{\r\n  const recipients = conversation.recipients.map(recipient=>{\r\n    return contact.find(contact => { contact.Email === recipient\r\n    })\r\n  })\r\n})\r\n  return (\r\n    <ConversationsContext.Provider value={{ conversations, createConversation }}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}